// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usr/session_storage/session_storage.go
//
// Generated by this command:
//
//	mockgen -source=internal/usr/session_storage/session_storage.go -destination=internal/usr/mocks/session_storage.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/thestoicway/user_service/internal/usr/model"
	gomock "go.uber.org/mock/gomock"
)

// Mocksessionstorage is a mock of sessionstorage interface.
type Mocksessionstorage struct {
	ctrl     *gomock.Controller
	recorder *MocksessionstorageMockRecorder
}

// MocksessionstorageMockRecorder is the mock recorder for Mocksessionstorage.
type MocksessionstorageMockRecorder struct {
	mock *Mocksessionstorage
}

// NewMocksessionstorage creates a new mock instance.
func NewMocksessionstorage(ctrl *gomock.Controller) *Mocksessionstorage {
	mock := &Mocksessionstorage{ctrl: ctrl}
	mock.recorder = &MocksessionstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocksessionstorage) EXPECT() *MocksessionstorageMockRecorder {
	return m.recorder
}

// AddSession mocks base method.
func (m *Mocksessionstorage) AddSession(ctx context.Context, session *model.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSession indicates an expected call of AddSession.
func (mr *MocksessionstorageMockRecorder) AddSession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*Mocksessionstorage)(nil).AddSession), ctx, session)
}

// DeleteSession mocks base method.
func (m *Mocksessionstorage) DeleteSession(ctx context.Context, jwtID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, jwtID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MocksessionstorageMockRecorder) DeleteSession(ctx, jwtID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*Mocksessionstorage)(nil).DeleteSession), ctx, jwtID)
}

// GetSession mocks base method.
func (m *Mocksessionstorage) GetSession(ctx context.Context, jwtID string) (*model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, jwtID)
	ret0, _ := ret[0].(*model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MocksessionstorageMockRecorder) GetSession(ctx, jwtID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*Mocksessionstorage)(nil).GetSession), ctx, jwtID)
}

// ReplaceSession mocks base method.
func (m *Mocksessionstorage) ReplaceSession(ctx context.Context, oldSession, session *model.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceSession", ctx, oldSession, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceSession indicates an expected call of ReplaceSession.
func (mr *MocksessionstorageMockRecorder) ReplaceSession(ctx, oldSession, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceSession", reflect.TypeOf((*Mocksessionstorage)(nil).ReplaceSession), ctx, oldSession, session)
}

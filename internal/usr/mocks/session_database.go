// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usr/session_database/session_database.go
//
// Generated by this command:
//
//	mockgen -source=internal/usr/session_database/session_database.go -destination=internal/usr/mocks/session_database.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/thestoicway/user_service/internal/usr/model"
	gomock "go.uber.org/mock/gomock"
)

// MockSessionDatabase is a mock of SessionDatabase interface.
type MockSessionDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockSessionDatabaseMockRecorder
}

// MockSessionDatabaseMockRecorder is the mock recorder for MockSessionDatabase.
type MockSessionDatabaseMockRecorder struct {
	mock *MockSessionDatabase
}

// NewMockSessionDatabase creates a new mock instance.
func NewMockSessionDatabase(ctrl *gomock.Controller) *MockSessionDatabase {
	mock := &MockSessionDatabase{ctrl: ctrl}
	mock.recorder = &MockSessionDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionDatabase) EXPECT() *MockSessionDatabaseMockRecorder {
	return m.recorder
}

// AddSession mocks base method.
func (m *MockSessionDatabase) AddSession(ctx context.Context, session *model.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSession", ctx, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSession indicates an expected call of AddSession.
func (mr *MockSessionDatabaseMockRecorder) AddSession(ctx, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*MockSessionDatabase)(nil).AddSession), ctx, session)
}

// DeleteSession mocks base method.
func (m *MockSessionDatabase) DeleteSession(ctx context.Context, jwtID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSession", ctx, jwtID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSession indicates an expected call of DeleteSession.
func (mr *MockSessionDatabaseMockRecorder) DeleteSession(ctx, jwtID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSession", reflect.TypeOf((*MockSessionDatabase)(nil).DeleteSession), ctx, jwtID)
}

// GetSession mocks base method.
func (m *MockSessionDatabase) GetSession(ctx context.Context, jwtID string) (*model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, jwtID)
	ret0, _ := ret[0].(*model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockSessionDatabaseMockRecorder) GetSession(ctx, jwtID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockSessionDatabase)(nil).GetSession), ctx, jwtID)
}

// ReplaceSession mocks base method.
func (m *MockSessionDatabase) ReplaceSession(ctx context.Context, oldSession, session *model.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceSession", ctx, oldSession, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceSession indicates an expected call of ReplaceSession.
func (mr *MockSessionDatabaseMockRecorder) ReplaceSession(ctx, oldSession, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceSession", reflect.TypeOf((*MockSessionDatabase)(nil).ReplaceSession), ctx, oldSession, session)
}
